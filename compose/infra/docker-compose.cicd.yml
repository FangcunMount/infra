# CI/CD 服务 - Jenkins
services:
  jenkins:
    build:
      context: ../../components/jenkins
      dockerfile: Dockerfile
      args:
        http_proxy: ${JENKINS_BUILD_HTTP_PROXY:-}
        https_proxy: ${JENKINS_BUILD_HTTPS_PROXY:-}
        no_proxy: ${JENKINS_BUILD_NO_PROXY:-}
      extra_hosts:
        - "host.docker.internal:${DOCKER_HOST_GATEWAY:-host-gateway}"
    image: ${JENKINS_IMAGE:-infra/jenkins:with-make}
    container_name: jenkins
    user: root
    networks:
      - backend
    restart: always
    ports:
      - "${JENKINS_HTTP_PORT:-8080}:8080"
      - "${JENKINS_AGENT_PORT:-50000}:50000"
    volumes:
      # Jenkins 主目录
      - /data/jenkins/jenkins_home:/var/jenkins_home
      # Configuration as Code 配置
      - /data/jenkins/casc_configs:/var/jenkins_home/casc_configs:ro
      # 插件预安装列表
      - /data/jenkins/jenkins_home/plugins.txt:/usr/share/jenkins/ref/plugins.txt:ro
      # Docker Socket (用于构建)
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # 日志
      - app_logs:/data/log/jenkins
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      # Jenkins 配置
      - JENKINS_ADMIN_USER=${JENKINS_ADMIN_USER:-admin}
      - JENKINS_ADMIN_PASSWORD=${JENKINS_ADMIN_PASSWORD}
      - CASC_JENKINS_CONFIG=/var/jenkins_home/casc_configs/jenkins.yaml
      # JVM 配置
      - JAVA_OPTS=${JENKINS_JAVA_OPTS:--Djenkins.install.runSetupWizard=false -Xmx1024m -Xms256m}
      - JENKINS_OPTS=${JENKINS_OPTS:-"--httpPort=8080 --logfile=/data/log/jenkins/jenkins.log"}
      # VPN 代理配置（默认指向宿主机代理，可在 .env 中覆盖）
      - HTTP_PROXY=${HTTP_PROXY:-http://host.docker.internal:7890}
      - HTTPS_PROXY=${HTTPS_PROXY:-http://host.docker.internal:7890}
      - http_proxy=${http_proxy:-http://host.docker.internal:7890}
      - https_proxy=${https_proxy:-http://host.docker.internal:7890}
      - NO_PROXY=${NO_PROXY:-localhost,127.0.0.1,::1,jenkins}
      - no_proxy=${no_proxy:-localhost,127.0.0.1,::1,jenkins}
      # Docker 环境
      - DOCKER_HOST=unix:///var/run/docker.sock
    deploy:
      resources:
        limits:
          memory: 600M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/login"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "infra.service=ci-cd"
      - "infra.category=automation"

networks:
  backend:
    external: true
    name: infra-backend

volumes:
  app_logs:
    external: true
    name: infra_app_logs